import streamlit as st
from predict_page import show_predict_page
from ranfor import show_ranfor
from log_reg import show_log_reg
from svm import show_svm
from explore import show_explore
from about import show_about
from privacy import show_privacy
from PIL import Image
from pathlib import Path
import hydralit_components as hc



st.set_page_config(layout="wide")

st.success("""Disclaimer for Enrollment Prediction App

	The Enrollment Prediction app is provided for informational purposes only. The enrollment predictions generated by the app are based on historical data and statistical analysis, and are not a guarantee of future enrollment rates.

	The app is intended to assist educational institutions in making enrollment decisions, but the ultimate decision to admit or reject a student rests solely with the institution. The app should not be used as the sole basis for enrollment decisions.

	The app may not account for all factors that could impact enrollment, such as changes in the economy, changes in the education system, or changes in student demographics. The app should be used in conjunction with other data and factors to make informed enrollment decisions.

	The creators of the app are not responsible for any errors or inaccuracies in the enrollment predictions generated by the app. The app is provided "as is" without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose.

	The creators of the app shall not be liable for any damages, including but not limited to, direct, indirect, special, incidental, or consequential damages or losses that arise out of or in connection with the use or inability to use the app, even if advised of the possibility of such damages.

	By using the Enrollment Prediction app, you agree to the terms of this disclaimer. If you do not agree to these terms, you should not use the app.""", icon="⚠️")





def app():

    
             
            
            
    st.markdown("<h1 style='text-align: center;'>HOLY ANGEL UNIVERSITY</h1>", unsafe_allow_html=True)
    st.markdown("<h2 style='text-align: center;'>ENROLLMENT FORECASTING  </h2>", unsafe_allow_html=True)


    image = Image.open('main.png')
    st.image(image, use_column_width=True)
    

    st.sidebar.markdown("# HOME")
    streamlit_style = """
			<style>
			@import url('https://fonts.googleapis.com/css?family=Poppins');

			html, body, [class*="css"]  {
			font-family: 'Poppins', sans-serif;
			}
			</style>
			"""
    st.markdown(streamlit_style, unsafe_allow_html=True)


    st.write("""Holy Angel University has over 16,000 students, making it one of the biggest schools in Central Luzon. 
        Established in 1933 by local philanthropist Juan D. Nepomuceno, it is considered the Philippines' first Catholic 
        school founded by a layman instead of the usual diocese or religious congregation. It is also the first Catholic
        high school in the country that is co-educational, instead of the usual exclusively for boys or exclusively for girls.""")
        
    st.write("""HAU offers cutting-edge academic programs from Basic Education to Graduate School and has a 
        package of scholarships and grants programs for qualified and deserving applicants. In its 9th decade, HAU continues to 
        provide a remarkable campus experience for every Angelite. """)
        
    st.write("""The purpose of this Machine Learning web based application is to predict the likelihood of incoming college freshmen 
        students to enroll at Holy Angel University by basing it on their demographic information and personality exam to 
        determine the possible number of enrollees. """)

    

    
 
def predict_page():
    st.markdown("# ENROLLMENT PREDICTION")
    st.sidebar.markdown("# PREDICT️")
    show_predict_page()

def model_fitting():
    st.markdown("# MODEL FITTING")
    st.sidebar.markdown("# MODEL FITTING")
    classifier = st.sidebar.selectbox("CHOOSE CLASSIFIER", ("SUPPORT VECTOR MACHINE (SVM)", "LOGISTIC REGRESSION", "RANDOM FOREST"))
    if classifier == "RANDOM FOREST":
        show_ranfor()     

    if classifier == "LOGISTIC REGRESSION":
       show_log_reg()
       
    if classifier == "SUPPORT VECTOR MACHINE (SVM)":
        show_svm()
        
def explore():
    st.markdown("# EXPLORE")
    st.sidebar.markdown("# EXPLORE️")
    show_explore()

def about():
    st.sidebar.markdown("# ABOUT")
    show_about()
	
def privacy():
    st.sidebar.markdown("# PRIVACY CONSENT")
    show_privacy()

page_names_to_funcs = {
    "HOME": app,
    "PREDICT": predict_page,
    "MODEL FITTING": model_fitting,
    "EXPLORE": explore,
    "ABOUT": about,
    "PRIVACY": privacy
}

selected_page = st.sidebar.selectbox("SELECT A PAGE", page_names_to_funcs.keys())
page_names_to_funcs[selected_page]()
st.sidebar.markdown("""
    [USER MANUAL](https://drive.google.com/drive/folders/1zurK5rQqgNSfNmAAEppK0bnn7Fhh21M4?usp=sharing)
    """)
